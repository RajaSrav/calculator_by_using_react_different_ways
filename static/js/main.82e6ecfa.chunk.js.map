{"version":3,"sources":["calculator.js","App.js","reportWebVitals.js","index.js"],"names":["Calculator","handlle1","event","setState","num1","target","value","handlle2","num2","click","name","total","parseInt","state","className","type","this","onChange","onClick","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2SAmEeA,EAjEf,kDACE,aAAc,IAAD,8BACX,gBAOFC,SAAW,SAACC,GACV,EAAKC,SAAS,CAACC,KAAKF,EAAMG,OAAOC,SATtB,EAWbC,SAAW,SAACL,GACV,EAAKC,SAAS,CAACK,KAAKN,EAAMG,OAAOC,SAZtB,EAcbG,MAAQ,SAACP,GAEkB,MAAtBA,EAAMG,OAAOK,KACd,EAAKP,SAAS,CACZQ,MAAMC,SAAS,EAAKC,MAAMT,MAAMQ,SAAS,EAAKC,MAAML,QAGzB,MAAtBN,EAAMG,OAAOK,KACpB,EAAKP,SAAS,CACZQ,MAAMC,SAAS,EAAKC,MAAMT,MAAMQ,SAAS,EAAKC,MAAML,QAGzB,MAAtBN,EAAMG,OAAOK,KACpB,EAAKP,SAAS,CACZQ,MAAMC,SAAS,EAAKC,MAAMT,MAAMQ,SAAS,EAAKC,MAAML,QAGzB,MAAtBN,EAAMG,OAAOK,MACpB,EAAKP,SAAS,CACZQ,MAAMC,SAAS,EAAKC,MAAMT,MAAMQ,SAAS,EAAKC,MAAML,SA/BxD,EAAKK,MAAM,CACTT,KAAK,GACLI,KAAK,GACLG,MAAM,IALG,EADf,0CAuCE,WACE,OACE,qBAAKG,UAAU,OAAf,SACE,sBAAKA,UAAU,YAAf,UACI,iDACJ,iCACE,uBAAOC,KAAK,OAAOT,MAAOU,KAAKH,MAAMT,KAAMa,SAAUD,KAAKf,WAC1D,uBAAOc,KAAK,OAAOT,MAAOU,KAAKH,MAAML,KAAMS,SAAUD,KAAKT,cAG5D,sBAAKO,UAAU,UAAf,UACA,wBAAQJ,KAAK,IAAIK,KAAK,SAASG,QAASF,KAAKP,MAA7C,eACA,wBAAQC,KAAK,IAAIK,KAAK,SAASG,QAASF,KAAKP,MAA7C,oBACA,wBAAQC,KAAK,IAAIK,KAAK,SAASG,QAASF,KAAKP,MAA7C,kBACA,wBAAQC,KAAK,IAAIK,KAAK,SAASG,QAASF,KAAKP,MAA7C,qBAEA,yCAAYO,KAAKH,MAAMF,kBAvD/B,GAAgCQ,aCUjBC,MARf,WACE,OACE,qBAAKN,UAAU,MAAf,SACE,cAAC,EAAD,OCKSO,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.82e6ecfa.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\nexport class Calculator extends Component {\r\n  constructor(){\r\n    super();\r\n    this.state={\r\n      num1:'',\r\n      num2:'',\r\n      total:''\r\n    }\r\n  }\r\n  handlle1 = (event) => {\r\n    this.setState({num1:event.target.value})\r\n  }\r\n  handlle2 = (event) => {\r\n    this.setState({num2:event.target.value})\r\n  }\r\n  click = (event) => {\r\n    // console.log(event.target.name == \"+\");\r\n    if(event.target.name === \"+\"){\r\n      this.setState({      \r\n        total:parseInt(this.state.num1)+parseInt(this.state.num2)\r\n    })\r\n    }\r\n    else if (event.target.name === \"-\") {\r\n      this.setState({      \r\n        total:parseInt(this.state.num1)-parseInt(this.state.num2)\r\n    })\r\n    }\r\n    else if (event.target.name === \"*\") {\r\n      this.setState({      \r\n        total:parseInt(this.state.num1)*parseInt(this.state.num2)\r\n    })\r\n    }\r\n    else if (event.target.name === \"/\") {\r\n      this.setState({      \r\n        total:parseInt(this.state.num1)/parseInt(this.state.num2)\r\n    })\r\n    }\r\n    \r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"main\">\r\n        <div className=\"container\">\r\n            <h1>Calculator APP </h1>\r\n        <form>\r\n          <input type=\"text\" value={this.state.num1} onChange={this.handlle1}/>\r\n          <input type=\"text\" value={this.state.num2} onChange={this.handlle2}/>\r\n        </form>\r\n        \r\n        <div className=\"buttons\">\r\n        <button name=\"+\" type=\"submit\" onClick={this.click}>+</button>\r\n        <button name=\"-\" type=\"submit\" onClick={this.click}>&ndash;</button>\r\n        <button name=\"*\" type=\"submit\" onClick={this.click}>&times;</button>\r\n        <button name=\"/\" type=\"submit\" onClick={this.click}>&divide;</button>\r\n        </div>\r\n        <h1>Result:{this.state.total}</h1>\r\n        </div>\r\n        \r\n        \r\n        \r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Calculator;\r\n","\nimport './App.css';\nimport Calculator from \"./calculator\"\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Calculator />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}