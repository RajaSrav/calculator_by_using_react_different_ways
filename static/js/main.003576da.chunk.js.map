{"version":3,"sources":["calculator.js","App.js","reportWebVitals.js","index.js"],"names":["Call","useState","result","setResult","handleClick","event","concat","target","name","clear","backspace","slice","calculate","eval","tostring","err","className","type","value","onClick","id","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qtBAEMA,KAAO,SAAPA,OACF,cAA4BC,oDAAS,IAArC,2KAAOC,OAAP,cAAeC,UAAf,cACMC,YAAc,SAACC,GACjBF,UAAUD,OAAOI,OAAOD,EAAME,OAAOC,QAEnCC,MAAQ,SAACJ,GACXF,UAAU,KAGRO,UAAY,SAACL,GACfF,UAAUD,OAAOS,MAAM,GAAI,KAEzBC,UAAY,SAAZA,UAAaP,OACf,IACIF,UAAUU,KAAKX,QAAQY,YACzB,MAAMC,KACJZ,UAAU,WAIlB,OACI,mEAAKa,UAAU,YAAf,UACI,4EACI,oEAAOC,KAAK,OAAOC,MAAOhB,WAE9B,mEAAKc,UAAU,SAAf,UACI,qEAAQA,UAAU,YAAYG,QAASV,MAAOW,GAAG,QAAjD,mBACA,qEAAQJ,UAAU,YAAYG,QAAST,UAAWU,GAAG,YAArD,eACA,qEAAQJ,UAAU,YAAYR,KAAK,IAAIW,QAASf,YAAhD,kBACA,qEAAQI,KAAK,IAAIW,QAASf,YAA1B,eACA,qEAAQI,KAAK,IAAIW,QAASf,YAA1B,eACA,qEAAQI,KAAK,IAAIW,QAASf,YAA1B,eACA,qEAAQY,UAAU,YAAYR,KAAK,IAAIW,QAASf,YAAhD,kBACA,qEAAQI,KAAK,IAAIW,QAASf,YAA1B,eACA,qEAAQI,KAAK,IAAIW,QAASf,YAA1B,eACA,qEAAQI,KAAK,IAAIW,QAASf,YAA1B,eACA,qEAAQY,UAAU,YAAYR,KAAK,IAAIW,QAASf,YAAhD,oBACA,qEAAQI,KAAK,IAAIW,QAASf,YAA1B,eACA,qEAAQI,KAAK,IAAIW,QAASf,YAA1B,eACA,qEAAQI,KAAK,IAAIW,QAASf,YAA1B,eACA,qEAAQY,UAAU,YAAYR,KAAK,IAAIW,QAASf,YAAhD,eACA,qEAAQI,KAAK,IAAIW,QAASf,YAA1B,eACA,qEAAQY,UAAU,YAAYR,KAAK,IAAIW,QAASf,YAAhD,eACA,qEAAQY,UAAU,YAAYG,QAASP,UAAWQ,GAAG,SAArD,sBAODpB,4B,8ICxCAqB,MARf,WACE,OACE,qBAAKL,UAAU,MAAf,SACE,cAAC,IAAD,OCKSM,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.003576da.chunk.js","sourcesContent":["import React, {useState} from 'react'\r\n\r\nconst Call = () => {\r\n    const [result, setResult] = useState(\"\");\r\n    const handleClick = (event) => {\r\n        setResult(result.concat(event.target.name));\r\n    }\r\n    const clear = (event) => {\r\n        setResult(\"\")\r\n\r\n    }\r\n    const backspace = (event) => {\r\n        setResult(result.slice(0, -1)) //result.length - 1\r\n    }\r\n    const calculate = (event) => {\r\n        try {\r\n            setResult(eval(result).tostring())\r\n        } catch(err) {\r\n            setResult(\"Error\")\r\n        }\r\n        \r\n    }\r\n    return (\r\n        <div className=\"container\">\r\n            <form>\r\n                <input type=\"text\" value={result}/>\r\n            </form>\r\n            <div className=\"keypad\">\r\n                <button className=\"highlight\" onClick={clear} id=\"clear\">Clear</button>\r\n                <button className=\"highlight\" onClick={backspace} id=\"backspace\">C</button>\r\n                <button className=\"highlight\" name=\"/\" onClick={handleClick}>&divide;</button>\r\n                <button name=\"7\" onClick={handleClick}>7</button>\r\n                <button name=\"8\" onClick={handleClick}>8</button>\r\n                <button name=\"9\" onClick={handleClick}>9</button>\r\n                <button className=\"highlight\" name=\"*\" onClick={handleClick}>&times;</button>\r\n                <button name=\"4\" onClick={handleClick}>4</button>\r\n                <button name=\"5\" onClick={handleClick}>5</button>\r\n                <button name=\"6\" onClick={handleClick}>6</button>\r\n                <button className=\"highlight\" name=\"-\" onClick={handleClick}>&ndash;</button>\r\n                <button name=\"1\" onClick={handleClick}>1</button>\r\n                <button name=\"2\" onClick={handleClick}>2</button>\r\n                <button name=\"3\" onClick={handleClick}>3</button>\r\n                <button className=\"highlight\" name=\"+\" onClick={handleClick}>+</button>\r\n                <button name=\"0\" onClick={handleClick}>0</button>\r\n                <button className=\"highlight\" name=\".\" onClick={handleClick}>.</button>\r\n                <button className=\"highlight\" onClick={calculate} id=\"result\">=</button>\r\n            </div>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Call;\r\n","\nimport './App.css';\nimport Call from \"./calculator\"\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Call />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}